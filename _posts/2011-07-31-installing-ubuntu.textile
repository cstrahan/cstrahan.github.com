---
layout: post
uuid: 001003709de7012e53cf001bfc9c480a
date: 2011-07-31 16:07:19
comments: true
title: The Ubuntu Experience
publish: true
---

!/images/2011-07-31-ubuntu-screenshot.png!

Here are the notes of my attempt to create the ultimate 64-bit Ubuntu 11.04 dev machine, from fresh install to "finish" (as if the tweaking is ever trully finished).

h2. Get Wireless Working

Just after I installed Ubuntu, I noticed that my wireless was acting a little slow. After a little probing, it turned out to be a driver conflict with the default Ralink USB drivers. A quick <code>lsmod | grep rt</code> showed that I had rt2870sta running (which was fine), and then a few other drivers that needed to be blacklisted. I had to append the following to <code>/etc/modeprobe.d/blacklist.conf</code>:

<pre class="console">
# Get wireless working
blacklist rt2800usb
blacklist rt2800lib
blacklist rt2x00usb
blacklist rt2x00lib
</pre>

Everything was pretty snappy after rebooting.

h2. UI Tweaks / Hardware Drivers / etc

I mostly followed these two articles immediately after installing Ubuntu:

* "Top Things to do after installing Ubuntu 11.04 Natty Narwhal":http://www.unixmen.com/linux-tutorials/linux-distributions/linux-distributions4-ubuntu/1540-top-things-to-do-after-installing-ubuntu-1104-natty-narwhal
* "12 Things I did After Installing New Ubuntu 11.04 Natty Narwhal":http://www.techdrivein.com/2011/04/12-things-i-did-after-installing-new.html

h2. OpenGL & SDL

Some packages for OpenGL/SDL bindings:

<pre class="console">
$ sudo apt-get install xorg-dev mesa-common-dev libglu1-mesa-dev \
                       libsdl1.2debian \
                       libsdl1.2debian-alsa \
                       libsdl1.2-dev \
                       libsdl-image1.2 \
                       libsdl-image1.2-dev \
                       libsdl-mixer1.2 \
                       libsdl-mixer1.2-dev \
                       libsdl-net1.2 \
                       libsdl-net1.2-dev \
                       freeglut3 freeglut3-dev \
                       glutg3 glutg3-dev
</pre>

h2. Adobe Air & Pandora One

I don't know about you, but I can't live without "Pandora One":http://www.pandora.com/desktop_app. Unfortunately, installing Adobe Air on 64-bit Ubuntu wasn't as easy as I had hoped. You _can_ get it to work with a little finagling though: "Install Adobe AIR on 64-bit Ubuntu 10.10":http://www.jamesward.com/2010/10/14/install-adobe-air-on-64-bit-ubuntu-10-10/.

h2. Exuberant CTags

<pre class="console">
$ sudo apt-get install exuberant-ctags
</pre>

h2. (D)VCS

<pre class="console">
$ sudo apt-get install subversion git-core mercurial
</pre>

h2. R

<pre class="console">
$ sudo apt-get install r-base r-base-dev
</pre>

h2. Java JRE & JDK

See "here":http://www.ubuntugeek.com/how-to-install-java-runtime-environment-jre-in-ubuntu.html.

h2. Scala

See "here":http://srirangan.net/2011-04-setting-up-scala-dev-environment-on-ubuntu-11-04.

h2. Haskell

You should be able to <code>sudo apt-get install haskell-platform</code>, but there was a bug in the package that caused apt-get to fail. Until it gets fixed, take a look "here":http://askubuntu.com/questions/44709/how-can-i-install-haskell-platform.

Here's what I did:

<pre class="console">
$ sudo add-apt-repository ppa:brcha/ppa
$ sudo apt-get update
$ sudo apt-get install haskell-platform</pre>
</pre>

h2. Ruby

I initially installed Ruby via <code>sudo apt-get install ruby</code>, but quickly removed the package in favor of letting "RVM":https://rvm.beginrescueend.com/ handle my rubies through and through. If you're not familiar with RVM, give this a good read: "Ubuntu, Ruby, RVM, Rails, and You":http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you/.

h2. GNU Smalltalk

Until Ubuntu starts packaging <code>gst</code> again, you'll need to compile it yourself. Grab the latest version from "here":http://smalltalk.gnu.org/ (at the time of writing, it was v3.2.4).

To compile:

<pre class="console">
# Prereqs:
$ sudo apt-get install tcl tcl-dev tk tk-dev

# Compile:
$ wget ftp://ftp.gnu.org/gnu/smalltalk/smalltalk-3.2.4.tar.gz
$ tar xzf smalltalk-3.2.4.tar.gz
$ cd smalltalk-3.2.4
$ autoreconf -vi
$ ./configure

# If ./configure outputs
#   "checking whether to install <SOME_PACKAGE_HERE>... no"
# you'll probably want to see which headers couldn't be found,
# and apt-get the corresponding library before continuing.

$ make
$ sudo make install
</pre>

h2. Squeak Smalltalk

<pre class="console">
$ sudo apt-get install squeak-vm
</pre>

h2. Racket

<pre class="console">
$ sudo add-apt-repository ppa:plt/racket
$ sudo apt-get update
$ sudo apt-get install racket
</pre>

h2. MIT Scheme

"This site":http://blog.thestever.net/2010/04/21/edwin-mit-scheme-on-x86-64-ubuntu-hardy-haron/ suggests that the following esential and optional packages be installed (respectively):

<pre class="console">
$ sudo apt-get install m4 autotools-dev libssl-dev libncurses5-dev libx11-dev libxt-dev libltdl-dev
$ sudo apt-get install libmhash-dev libmcrypt-dev libgdbm-dev libpq-dev libdb-dev
</pre>

Then download and compile:

<pre class="console">
$ wget http://ftp.gnu.org/gnu/mit-scheme/snapshot.pkg/20090107/mit-scheme-c-20090107.tar.gz
$ tar xzf mit-scheme-c-20090107.tar.gz
$ cd mit-scheme-c-20090107/src
$ etc/make-liarc.sh
$ sudo make install
</pre>

h2. CLISP

<pre class="console">
$ sudo apt-get instal clisp
</pre>

h2. SBCL

<pre class="console">
$ sudo apt-get instal sbcl
</pre>

h2. Erlang

See "this gist/script":https://gist.github.com/991706.

h2. MongoDB

<pre class="console">
$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
$ sudo nano /etc/apt/sources.list
$ echo "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen" | sudo tee --append /etc/apt/sources.list
$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install mongodb-10gen
</pre>

h2. Programming Environments

I installed Eclipse, Netbeans and Emacs from the Software Center. Vim and IntelliJ IDEA were a little more involved, though.

h3. Installing IntelliJ IDEA

See "here":http://www.niftyeyeblog.com/intellij-idea-on-ubuntu/.

h3. Installing Vim

I wanted a decent Vim will all the bells and whistles, including "Command-T":http://www.vim.org/scripts/script.php?script_id=3025. Ubuntu has a package for Vim, but it's a little flakey with Ruby extensions (it was at the time wrote this, anyway). Here's (more or less) everything I needed to get a big fat vim compiled and installed from source.

<pre class="console">
# Vim dependencies:
$ sudo apt-get install libncurses5-dev libgnome2-dev libgnomeui-dev \
  libgtk2.0-dev libatk1.0-dev libbonoboui2-dev \
  libcairo2-dev libx11-dev libxpm-dev libxt-dev

# Language bindings:
$ sudo apt-get install python python-dev lua5.1 luarocks perl libperl5.10

# Compile:
$ hg clone https://vim.googlecode.com/hg/ ~/vim
$ cd ~/vim
$ hg update -C v7-3-154
$ ./configure --with-features=huge \
            --enable-perlinterp --enable-pythoninterp \
            --enable-rubyinterp --enable-gui=gnome2 \
            --disable-largefile \
            --enable-luainterp=dynamic
$ make
$ sudo make install

# If you get "Terminal entry not found in terminfo 'gnome-256color'" in terminal vim,
# you'll want this:
$ sudo apt-get install ncurses-term
</pre>

h2. Dotfiles

After installing my favorite apps, I needed to get my dotfiles from my Windows box copied over. This presented a bit of a problem, considering how I had my dotfiles stored in git: all files were in the root, which meant that I had to clone the repo directly into my home folder. I settled on creating a dedicated <code>~/.dotfiles</code> folder to host my dotfiles, each of which would then be symlinked into <code>~/</code> via a <code>Rakefile</code>. Whenever I get around to customizing my <code>bash</code>, I'll throw in a script to recursively load my scripts.

You can take a look at my <code>Rakefile</code> and dotfiles "here":https://github.com/cstrahan/dotfiles/.

